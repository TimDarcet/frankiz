* Mise à jour des tables frankiz2.annonces et a_valider.valid_annonces
* ajout d'un champ de commentaire à l'attentiondes webmestres
ALTER TABLE frankiz2.annonces ADD commentaire TEXT NOT NULL ;
ALTER TABLE a_valider.valid_annonces ADD commentaire TEXT NOT NULL ;



* Mise a jour des tables admin.liste_virus et admin.infections
* Le champ 'port' de infections devient 'virus_id'
* Le champ 'port' de liste_virus peut maintenat prendre une valeur nulle

etape 1: exporter les tables existantes en format de type CSV:
SELECT INTO OUTFILE '/tmp/liste_virus' FIELDS TERMINATED BY ';' OPTIONALLY
ENCLOSED BY '"' LINES TERMINATED BY '\n' FROM admin.liste_virus;
SELECT INTO OUTFILE '/tmp/infections' FIELDS TERMINATED BY ';' OPTIONALLY
ENCLOSED BY '"' LINES TERMINATED BY '\n' FROM admin.infections;

etape 2: transformer le champ 'port' existant en l'equivalent 'virus_id'
$ cat /tmp/infections |sed 's/;135/;1/' |sed 's/;445/;2/' > /tmp/infections2

etape 3: sauvergarder les anciennes tables dans admin
ALTER TABLE `infections` RENAME `infections_bak`;
ALTER TABLE `liste_virus` RENAME `liste_virus_bak`;

etape 4: creer les nouvelles tables
CREATE TABLE `infections` (
	`id` int(11) not NULL AUTO_INCREMENT,
	`ip` varchar(16) not NULL,
	`date` date not NULL,
	`virus_id` int(11) not NULL,
	`solved` int(11) not NULL,
	UNIQUE key `id` (`id`),
	key `ip` (`ip`),
	key `virus_id` (`virus_id`)
	)
	type=MyISAM AUTO_INCREMENT=1;

CREATE TABLE `liste_virus` (
	`virus_id` int(11) not NULL AUTO_INCREMENT,
	`port` int(11),
	`nom` varchar(16) not NULL,
	UNIQUE key `virus_id` (`virus_id`),
	key `port` (`port`)
	)
	type=MyISAM AUTO_INCREMENT=1;

etape 5: importer les anciennes donnees
LOAD DATA LOCAL INFILE '/tmp/liste_virus' INTO TABLE `liste_virus` FIELDS
TERMINATED BY ';' OPTIONALLY ENCLOSED BY '"' ESCAPED BY '\\' LINES TERMINATED BY '\n';
LOAD DATA LOCAL INFILE '/tmp/infections2' INTO TABLE `infections` FIELDS
TERMINATED BY ';' OPTIONALLY ENCLOSED BY '"' ESCAPE BY '\\' LINES TERMINATED
BY '\n';




*Mise à jour des tables frankiz2.qdj_points, frankiz2.qdj et
frankiz2.qdj_votes

Etape 1  : ça ne sert vraiment à rien de pouvoir stoquer le nombre de vote
dans une catégorie d'une personne sur un entier de 4 octets.. Un seul, non
signé, est amplement suffisant 

ALTER TABLE `qdj_points` CHANGE `nb1` `nb1` TINYINT UNSIGNED NOT NULL DEFAULT
'0',
CHANGE `nb2` `nb2` TINYINT UNSIGNED NOT NULL DEFAULT '0',
CHANGE `nb3` `nb3` TINYINT UNSIGNED NOT NULL DEFAULT '0',
CHANGE `nb4` `nb4` TINYINT UNSIGNED NOT NULL DEFAULT '0',
CHANGE `nb5` `nb5` TINYINT UNSIGNED NOT NULL DEFAULT '0',
CHANGE `nb6` `nb6` TINYINT UNSIGNED NOT NULL DEFAULT '0',
CHANGE `nb7` `nb7` TINYINT UNSIGNED NOT NULL DEFAULT '0',
CHANGE `nb8` `nb8` TINYINT UNSIGNED NOT NULL DEFAULT '0',
CHANGE `nb9` `nb9` TINYINT UNSIGNED NOT NULL DEFAULT '0';



Etape 2 : on rajoute un champs supplémentaire dans la table qdj_points pour la
10eme rêgle introduite par le QDJmestre (7.1 points en plus quand il valide la
QDJ de quelqu'un)

ALTER TABLE `qdj_points` ADD `nb10` TINYINT UNSIGNED NOT NULL DEFAULT '0';


Etape 3 : pour pouvoir reconstruire la table qdj_points pour les 2 mois
d'avant, on stoque le numéro de la rêgle validé par lg pour chaque
enregistrement dans qdj_votes

ALTER TABLE `qdj_votes` ADD `idRegle` TINYINT UNSIGNED NOT NULL ;

Etape 4 : Stocker l'identifiant de la personne proposant une QDJ afin de lui
rajouter des points si elle est acceptée.

ALTER TABLE `qdj` ADD `id_eleve` SMALLINT UNSIGNED NOT NULL ;


Etape 5 : Donner les anciene QDJ au QDJmestre

UPDATE qdj SET eleve_id = 6649 where eleve_id = 0;

Etape 6 : modification de l'index

ALTER TABLE `qdj_votes` DROP INDEX `eleve` ,
ADD UNIQUE `eleve` ( `date` , `eleve_id` , `ordre` ) ;




*Mise à jour de la table frankiz2.liens

ALTER TABLE `liens` ADD `visible_ext` INT( 1 ) NOT NULL  

* Mise à jour des tables de sondages pour pouvoir obtenir des résultats groupés.

ALTER TABLE sondage_reponse ADD COLUMN answer_id INTEGER(10) NOT NULL DEFAULT 0;
